** 関数
*** OS判定
#+BEGIN_SRC emacs-lisp
  (defconst IS-MAC (eq system-type 'darwin))
  (defconst IS-LINUX (memq system-type '(gnu gnu/linux gnu/kfreebsd berkeley-unix)))
  (defconst IS-WINDOWS (memq system-type '(cygwin windows-nt ms-dos)))
#+END_SRC

*** ターミナル判定
#+BEGIN_SRC emacs-lisp
  (defconst IS-TERM (eq window-system nil))
#+END_SRC

** 基本設定
*** フォント
#+BEGIN_SRC emacs-lisp
  (when (member "PlemolJP Console NF" (font-family-list))
    (add-to-list 'default-frame-alist '(font . "PlemolJP Console NF-10")))

  (set-language-environment "Japanese")
#+END_SRC

*** 対応する括弧を強調
#+BEGIN_SRC emacs-lisp
  (show-paren-mode t)
#+END_SRC

*** スタートアップ画面を非表示
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC

*** バックアップファイル
バックアップを作らない。
#+BEGIN_SRC emacs-lisp
  (setq make-backup-files nil)
#+END_SRC

*** オートセーブファイル
オートセーブファイルを作らない。
#+BEGIN_SRC emacs-lisp
  (setq auto-save-default nil)
#+END_SRC

*** タブをスペースに設定
#+BEGIN_SRC emacs-lisp
  (setq-default tab-width 4)
  (setq-default indent-tabs-mode nil)
#+END_SRC

*** yes/NoをY/Nに短縮
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

*** カーソル位置の単語をハイライト
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c h") 'highlight-symbol-at-point)
#+END_SRC

*** メニューバーを非表示
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

*** ツールバーを非表示
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode 0)
#+END_SRC

*** スクロールバーを非表示
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
#+END_SRC

*** ターミナルでの色設定の改善
256色をサポート
#+BEGIN_SRC emacs-lisp
  (unless (display-graphic-p)
    (setq term-terminal-parameter 'xterm-256color))
#+END_SRC
*** 保存時に不要な空白を削除
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

*** 削除したファイルをゴミ箱へ移動する
#+BEGIN_SRC emacs-lisp
  (setq delete-by-moving-to-trash t)
#+END_SRC

*** 末尾のスペースを可視化
#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
#+END_SRC
*** スクロール高速化
#+BEGIN_SRC emacs-lisp
  (setq fast-but-imprecise-scrolling t)
#+END_SRC
*** native-compの警告を表示しない
#+BEGIN_SRC emacs-lisp
  (setq native-comp-async-report-warnings-errors 'silent)
#+END_SRC

*** Windows最適化
#+BEGIN_SRC emacs-lisp
  (when IS-WINDOWS
    (setq w32-get-true-file-attributes nil
          w32-pipe-read-delay 0
          w32-pipe-buffer-size (* 64 1024)))
#+END_SRC
*** 各OSの最適化
#+BEGIN_SRC emacs-lisp
  (when IS-WINDOWS
    (setq w32-use-native-image-API t))

  (unless IS-MAC
    (setq command-line-ns-option-alist nil))

  (unless IS-LINUX
    (setq command-line-x-option-alist nil))
#+END_SRC

** keybind
*** C-h -> BS
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-h") 'delete-backward-char)
  (global-set-key (kbd "<f1>") 'help-command)
#+END_SRC

*** 行番号トグル
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c n") 'display-line-numbers-mode)
#+END_SRC

** evil
*** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :disabled t
    :init
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-fu)
    (setq evil-want-C-i-jump nil) ;; C-iをTabに割当て
    :config
    (evil-mode 1)
    ;; バッファ全体を選択するテキストオブジェクトを定義
    (evil-define-text-object evil-buffer-text-object (count &optional beg end type)
                             "Select entire buffer."
                             (evil-range (point-min) (point-max) type))
    (define-key evil-inner-text-objects-map "e" 'evil-buffer-text-object)
    (define-key evil-outer-text-objects-map "e" 'evil-buffer-text-object)
    )
#+END_SRC
*** evil-collection
https://github.com/emacs-evil/evil-collection
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init)
    )
#+END_SRC
*** evil-surround
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :after evil
    :config
    (global-evil-surround-mode 1)
    )
#+END_SRC
*** evil-commentary
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :after evil
    :config
    (evil-commentary-mode)
    )
#+END_SRC

** clipetty(OSC52)
#+BEGIN_SRC emacs-lisp
  (use-package clipetty
    :if (not window-system)
    :hook (after-init . global-clipetty-mode)
    )
#+END_SRC

** [[https://github.com/akermu/emacs-libvterm][vterm]]
以下のパッケージをインストールしておく。
#+BEGIN_SRC shell
  sudo apt install cmake libtool libtool-bin
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package vterm
    :hook ((vterm-mode . (lambda () (display-line-numbers-mode 0)))
           (vterm-mode . (lambda ()   (setq show-trailing-whitespace nil)))
           )
    :custom
    (vterm-max-scrollback 10000)
    )
#+END_SRC

*** [[https://github.com/jixiuf/vterm-toggle][vterm-toggle]]
#+BEGIN_SRC emacs-lisp
  (use-package vterm-toggle
    :bind ("C-c l" . 'vterm-toggle)
    :config
    ;; 現在のウィンドウに vterm バッファを表示する。
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                   (display-buffer-reuse-window display-buffer-same-window)))
    )
#+END_SRC

** smartparens
括弧を自動補完する。
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :disabled t
    :config
    (require 'smartparens-config)
    (smartparens-global-mode 1))
#+END_SRC

** dired-subtree
Diredバッファ内でディレクトリを展開・折りたたみ。
#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree)
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode)
    )
#+END_SRC
** theme
#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    (require-theme 'modus-themes)

    (setq modus-themes-italic-constructs t
          modus-themes-bold-constructs nil)

    (load-theme 'modus-vivendi)
    (define-key global-map (kbd "<f5>") #'modus-themes-toggle))
#+END_SRC

** eglot
#+BEGIN_SRC emacs-lisp
  (use-package eglot)
#+END_SRC

** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck)
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook (after-init . global-company-mode)
    :bind
    ("C-c m" . company-complete) ;; 補完を起動する
    :custom
    (company-backends '((company-capf company-yasnippet)))
    (company-minimum-prefix-length 2)
    (company-selection-wrap-around t) ;; 候補の一番下の更に下を一番上につなげる
    (company-idle-delay 0.0)
    (company-inhibit-inside-symbols t)
    :config
    ;; capfとyasnippetを合成する関数。
    (defun my/company-capf-and-yasnippet ()
      "Merge `company-capf` and `company-yasnippet` backends."
      (setq-local company-backends
                  '((company-capf :with company-yasnippet))))

    ;; eglot使用時にバックエンドを調整
    (add-hook 'eglot-managed-mode-hook #'my/company-capf-and-yasnippet)
    )
#+END_SRC

*** company-prescient
表示順を調整する。
#+BEGIN_SRC emacs-lisp
  (use-package prescient
    :config
    (prescient-persist-mode 1))

  (use-package company-prescient
    :after (company prescient)
    :config
    (company-prescient-mode 1))
#+END_SRC

*** company-box
#+BEGIN_SRC emacs-lisp
  (use-package company-box
    :straight t
    :hook (company-mode . company-box-mode))
#+END_SRC

** yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :custom
    (yas-snippet-dirs '("~/.emacs.d/snippets"))
    :config
    (yas-global-mode 1)
    )

  (use-package yasnippet-snippets
    :after yasnippet
    )
#+END_SRC

** [[https://github.com/abo-abo/swiper?tab=readme-ov-file#ivy][ivy]]
#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :custom
    (ivy-use-virtual-buffers t)
    (enable-recursive-minibuffers t)
    (ivy-count-format "(%d/%d) ")
    (ivy-re-builders-alist '((t . ivy--regex-fuzzy))) ;; ファジーマッチングを有効化
    :config
    (ivy-mode 1)
    )
#+END_SRC

** [[https://github.com/abo-abo/swiper?tab=readme-ov-file#counsel][counsel]]
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :after (ivy)
    :config
    (counsel-mode 1)
    )
#+END_SRC

** [[https://github.com/abo-abo/swiper?tab=readme-ov-file#swiper][swiper]]
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :after (ivy)
    :config
    (global-set-key "\C-s" 'swiper)
    )
#+END_SRC

** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :after (ivy)
    :custom
    (projectile-completion-system 'ivy)
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    )

  (use-package counsel-projectile
    :after (projectile counsel)
    :config
    (counsel-projectile-mode) ;; counselと連携
    )
#+END_SRC

** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
#+END_SRC
** undo-fu
*** undo-fu
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu)
#+END_SRC
*** undo-fu-session
#+BEGIN_SRC emacs-lisp
  (use-package undo-fu-session
    :after undo-fu
    :config
    (undo-fu-session-global-mode +1)
    )
#+END_SRC

** restart-emacs
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs)
#+END_SRC
** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode)
    )
#+END_SRC
** autorevert
他プロセスの編集をバッファに反映
#+BEGIN_SRC emacs-lisp
  (use-package autorevert
    :init
    (global-auto-revert-mode +1))
#+END_SRC

** path-headerline-mode
#+BEGIN_SRC emacs-lisp
  (use-package path-headerline-mode
    :config
    (path-headerline-mode +1)
    )
#+END_SRC

** org-mode
*** インデントモード
見出しやリストなどの階層構造に応じて自動的にインデントを調整する
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

*** 保存時にバッファ全体をインデント
#+BEGIN_SRC emacs-lisp
  (defun my-org-indent-buffer ()
    "Indent the entire buffer when saving in Org mode."
    (when (eq major-mode 'org-mode)
      (indent-region (point-min) (point-max))))

  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'before-save-hook 'my-org-indent-buffer nil 'local)))
#+END_SRC

*** リンクを開く
#+BEGIN_SRC emacs-lisp
  (setq org-return-follows-link t  ; Returnキーでリンク先を開く
        org-mouse-1-follows-link t ; マウスクリックでリンク先を開く
        )
#+END_SRC
** typescript-mode
#+BEGIN_SRC emacs-lisp
  (use-package typescript-mode
    :hook (typescript-mode . eglot-ensure)
    :config
    (add-to-list 'auto-mode-alist '("\\.ts\\'" . typescript-mode))
    )
#+END_SRC


LSPサーバーのインストール
#+BEGIN_SRC
npm install -g typescript-language-server typescript
#+END_SRC

** c++-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'c++-mode-hook #'eglot-ensure)
#+END_SRC

** dockerfile-mode
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :config
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))
    )
#+END_SRC

** docker-compose-mode
#+BEGIN_SRC emacs-lisp
  (use-package docker-compose-mode)
#+END_SRC

** Tips
*** 選択範囲を評価
M-x eval-region

*** バッファをリロード
M-x revert-buffer

*** マルチホップ
/ssh:ユーザー名@リモートホスト|docker:コンテナID:/パス/to/ファイル

*** org-mode
**** 見出し間のジャンプ
C-c C-n, C-c C-p

*** 一括開閉
C-u C-i
